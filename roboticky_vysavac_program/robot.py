# Importy knihoven a modul≈Ø
import math
import pygame
import random
from settings import CELL_SIZE, SENSOR_RADIUS, EXPLORED_RADIUS, ROBOT_RADIUS, MOVE_SPEED
from utils import find_free_spot, a_star

# Definice t≈ô√≠dy Robot, kter√° ≈ô√≠d√≠ chov√°n√≠ robota
class Robot:
    def __init__(self, room):
        self.room = room                                      # Odkaz na m√≠stnost, ve kter√© se robot pohybuje
        self.x, self.y = find_free_spot(self.room.grid)       # N√°hodnƒõ zvolen√© voln√© m√≠sto pro start
        self.angle = 0                                        # √öhel otoƒçen√≠ (moment√°lnƒõ nevyu≈æit)
        self.mode = "mapping"                                 # Poƒç√°teƒçn√≠ re≈æim ‚Äì mapov√°n√≠
        self.cleaned = set()                                  # Mno≈æina ji≈æ vyƒçi≈°tƒõn√Ωch dla≈ædic
        self.path = []                                        # Aktu√°ln√≠ napl√°novan√° cesta (seznam bod≈Ø)
        self.trail = []                                       # Historie pohybu (pro vizualizaci)
        self.clean_targets = []                               # Seznam m√≠st, kter√° je pot≈ôeba uklidit
        self.clean_path_ready = False                         # Zda ji≈æ byl vygenerov√°n seznam pro √∫klid
        self.done = False                                     # Zda je √∫klid zcela dokonƒçen

    def get_pos(self):
        # Vrac√≠ aktu√°ln√≠ pozici robota v pixelech (cel√° ƒç√≠sla)
        return int(self.x), int(self.y)

    def sensor_scan(self):
        # Simulace senzor≈Ø ‚Äì kontroluje body v dosahu obou kruh≈Ø
        px, py = self.get_pos()
        for dy in range(-SENSOR_RADIUS, SENSOR_RADIUS + 1):
            for dx in range(-SENSOR_RADIUS, SENSOR_RADIUS + 1):
                tx, ty = px + dx, py + dy
                if 0 <= tx < self.room.pixel_width and 0 <= ty < self.room.pixel_height:
                    dist = math.hypot(dx, dy)
                    if dist <= SENSOR_RADIUS and self.room.line_of_sight((px, py), (tx, ty)):
                        if dist <= EXPLORED_RADIUS:
                            self.room.mark_visible(tx, ty)    # Bod byl skuteƒçnƒõ vidƒõn v men≈°√≠m kruhu
                        else:
                            self.room.mark_outer(tx, ty)      # Bod jen v dosahu vƒõt≈°√≠ho kruhu
        self.trail.append((int(self.x), int(self.y), self.mode))  # Ulo≈æen√≠ stopy robota

    def move(self, dx, dy):
        # Pokus o posun robota ‚Äì nejprve zkontroluje kolizi
        new_x = self.x + dx
        new_y = self.y + dy
        if not self.room.collides_pixel(new_x, new_y):
            self.x = new_x
            self.y = new_y

    def update(self):
        # Hlavn√≠ logika robota ‚Äì vol√°na v ka≈æd√©m kroku simulace
        self.sensor_scan()

        if self.mode == "mapping":
            if self.room.is_fully_mapped():
                print("‚úÖ Mapa hotov√°. P≈ôep√≠n√°m do re≈æimu 'cleaning'")
                self.mode = "cleaning"
                self.path = []
                self.clean_targets = []
                self.clean_path_ready = False
            else:
                self.mapping_behavior()
        elif self.mode == "cleaning":
            if not self.clean_path_ready:
                self.generate_cleaning_targets()
                self.clean_path_ready = True
            self.cleaning_behavior()

    def mapping_behavior(self):
        # Chov√°n√≠ p≈ôi mapov√°n√≠ ‚Äì hled√°n√≠ frontier≈Ø a p≈ôesun k nim
        cx, cy = int(self.x // CELL_SIZE), int(self.y // CELL_SIZE)
        if not self.path:
            frontier = self.room.find_frontier()
            if frontier:
                self.path = a_star(self.room.grid, (cx, cy), frontier)
        if self.path:
            tx, ty = self.path[0]
            tx_pix = tx * CELL_SIZE + CELL_SIZE // 2
            ty_pix = ty * CELL_SIZE + CELL_SIZE // 2
            dx = tx_pix - self.x
            dy = ty_pix - self.y
            dist = math.hypot(dx, dy)
            if dist < 1.5:
                self.path.pop(0)  # C√≠l dosa≈æen
            else:
                angle = math.atan2(dy, dx)
                self.move(math.cos(angle) * MOVE_SPEED, math.sin(angle) * MOVE_SPEED)
        else:
            self.angle += random.choice([90, -90])  # Pokud nen√≠ cesta, n√°hodnƒõ zmƒõn√≠ smƒõr

    def generate_cleaning_targets(self):
        # Vygenerov√°n√≠ po≈ôad√≠ √∫klidu ‚Äì ve stylu Snake (≈ô√°dek po ≈ô√°dku)
        print("üîÑ Generuji seznam √∫klidov√Ωch bod≈Ø...")
        for y in range(self.room.grid_height):
            row = range(self.room.grid_width) if y % 2 == 0 else reversed(range(self.room.grid_width))
            for x in row:
                if self.room.known[y][x] == 0 and self.room.grid[y][x] == 0:
                    self.clean_targets.append((x, y))
        print(f"üßπ C√≠l≈Ø k √∫klidu: {len(self.clean_targets)}")

    def cleaning_behavior(self):
        # Chov√°n√≠ robota p≈ôi √∫klidu
        cx, cy = int(self.x // CELL_SIZE), int(self.y // CELL_SIZE)
        self.cleaned.add((cx, cy))  # Oznaƒç√≠ souƒçasnou bu≈àku jako vyƒçi≈°tƒõnou

        if not self.path and self.clean_targets:
            # Pokud nen√≠ aktivn√≠ cesta a zb√Ωv√° c√≠l, napl√°nuj trasu
            next_target = self.clean_targets.pop(0)
            start = (int(self.x // CELL_SIZE), int(self.y // CELL_SIZE))
            self.path = a_star(self.room.grid, start, next_target)
            if not self.path:
                print(f"‚ö†Ô∏è Nelze doj√≠t k c√≠li {next_target}, p≈ôeskoƒçeno.")

        if self.path:
            # Pohyb pod√©l napl√°novan√© trasy
            tx, ty = self.path[0]
            tx_pix = tx * CELL_SIZE + CELL_SIZE // 2
            ty_pix = ty * CELL_SIZE + CELL_SIZE // 2
            dx = tx_pix - self.x
            dy = ty_pix - self.y
            dist = math.hypot(dx, dy)
            if dist < 1.5:
                self.path.pop(0)  # C√≠l dosa≈æen
            else:
                angle = math.atan2(dy, dx)
                self.move(math.cos(angle) * MOVE_SPEED, math.sin(angle) * MOVE_SPEED)
        elif not self.clean_targets and not self.done:
            # V≈°e uklizeno ‚Äì √∫klid dokonƒçen
            print("‚úÖ √öklid dokonƒçen.")
            self.done = True
